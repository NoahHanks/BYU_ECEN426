Score: 24 / 31

-------------------------------------------------------------------------------



### Test
Does the program report an error with no arguments with a usage message? 

### Points
1 / 1

### Command
```
bin/tcp_client
```

### stdout
```

```

### stderr
```

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program print to stderr with no arguments? 

### Points
1 / 1

### Command
```
bin/tcp_client
```

### stdout
```

```

### stderr
```

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program return the correct return code (1) with no arguments? 

### Points
1 / 1

### Command
```
bin/tcp_client
```

### stdout
```

```

### stderr
```

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program print a help message and is the message updated for lab 2? 

### Points
1 / 1

### Command
```
bin/tcp_client --help
```

### stdout
```

```

### stderr
```

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT
11:36:40 [33mWARN [0m [90msrc/main.c:40:[0m Incorrect arguments provided

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program report an error with an unknown option? 

### Points
1 / 1

### Command
```
bin/tcp_client --unknown testing/input.txt
```

### stdout
```

```

### stderr
```
bin/tcp_client: unrecognized option '--unknown'
11:36:40 [31mERROR[0m [90msrc/tcp_client.c:121:[0m Invalid option



Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program report an error with an extra argument? 

### Points
1 / 1

### Command
```
bin/tcp_client testing/input.txt test
```

### stdout
```

```

### stderr
```
11:36:40 [31mERROR[0m [90msrc/tcp_client.c:183:[0m client: failed to connect

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program properly handle an incorrect port? 

### Points
1 / 1

### Command
```
bin/tcp_client -p abc testing/input.txt
```

### stdout
```

```

### stderr
```
11:36:41 [31mERROR[0m [90msrc/tcp_client.c:101:[0m Incorrect port number

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

Usage: tcp_client [--help] [-v] [-h HOST] [-p PORT] ACTION MESSAGE

Arguments:
ACTION   Must be uppercase, lowercase, rreverse,
	   shuffle, or random.
MESSAGE  Message to send to the server

Options:
  --help
  -v, --verbose
  --host HOSTNAME, -h HOSTNAME
  --port PORT, -p PORT

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program report an error with no connection? 

### Points
1 / 1

### Command
```
bin/tcp_client --port 9999 testing/input.txt
```

### stdout
```

```

### stderr
```
11:36:42 [31mERROR[0m [90msrc/tcp_client.c:183:[0m client: failed to connect

```

### Return Code
1

-------------------------------------------------------------------------------



### Test
Does the program report an error with a nonexistent file? 

### Points
1 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/unknown.txt
```

### stdout
```

```

### stderr
```
11:36:42 [31mERROR[0m [90msrc/main.c:61:[0m There was an error trying to open the file.

```

### Return Code
-11

-------------------------------------------------------------------------------



### Test
Does the program properly handle normal input? (run it a few times) 

### Points
10 / 10

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/input.txt
```

### stdout
```
emiT erofeB NAL ehT
PRETTY FLY FOR A WI-FI 
LN o Mlk aaaaaaaand oney 
THE PROMISED LAN 
wi-fight the inevitable?
sNAL eht fo ecneliS

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the program print to stdout for normal input? 

### Points
1 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/input.txt
```

### stdout
```
emiT erofeB NAL ehT
PRETTY FLY FOR A WI-FI 
LAN              of MMil and Hoooone 
THE PROMISED LAN 
wi-fight the inevitable?
sNAL eht fo ecneliS

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the program return the correct return code (0) for normal input? 

### Points
1 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/input.txt
```

### stdout
```
emiT erofeB NAL ehT
PRETTY FLY FOR A WI-FI 
LN off ilk aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaand Hony
THE PROMISED LAN 
wi-fight the inevitable?
sNAL eht fo ecneliS

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the program handle a file with bad actions? 

### Points
0 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/bad.txt
```

### stdout
```
i hope this works
error
IT WORKED!

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the return the proper return code (0) a file with bad actions? 

### Points
1 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/bad.txt
```

### stdout
```
i hope this works
error
IT WORKED!

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the program handle a file with an empty line? 

### Points
0 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/bad2.txt
```

### stdout
```
i hope this works

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the return the proper return code (0) a file an empty line? 

### Points
1 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/bad2.txt
```

### stdout
```
i hope this works

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the program handle a file that is empty? 

### Points
0 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/empty.txt
```

### stdout
```
b'None'
```

### stderr
```
b'None'
```

### Return Code
None

-------------------------------------------------------------------------------



### Test
Does the program handle a file with only an action? 

### Points
1 / 1

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/bad3.txt
```

### stdout
```
i hope this works

IT WORKED!

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the program properly handle large input? 

### Points
0 / 2

### Command
```
bin/tcp_client --host lundrigan.byu.edu testing/large.txt
```

### stdout
```

```

### stderr
```

```

### Return Code
-11

-------------------------------------------------------------------------------



### Test
Does the program receive properly? (Server with small send buffer) 

### Points
0 / 1

### Command
```
bin/tcp_client --port 8181 testing/large.txt
```

### stdout
```

```

### stderr
```

```

### Return Code
-11

-------------------------------------------------------------------------------



### Test
Does the program send properly? (Server with small receive buffer) 

### Points
0 / 1

### Command
```
bin/tcp_client --port 8281 testing/large.txt
```

### stdout
```

```

### stderr
```

```

### Return Code
-11

-------------------------------------------------------------------------------

