Score: 9 / 13

-------------------------------------------------------------------------------



### Test
Does the server properly handle a GET of a valid page (200 and content-length header)? 

### Points
4 / 6

### Command
```
testing/get.sh
```

### stdout
```
*   Trying 127.0.0.1:8084...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8084 (#0)
> GET /page.html HTTP/1.1
> Host: localhost:8084
> User-Agent: curl/7.68.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
* HTTP 1.0, assume close after body
< HTTP/1.0 200 OK
< 
{ [1260 bytes data]
* Closing connection 0
<html>

<head>
    <meta charset="UTF-8">
    <title>Demo Page</title>
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
        integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous"> -->
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://use.typekit.net/jcn6ybb.css">
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        html {
            background: url(background.jpg) no-repeat center center fixed;
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: cover;
        }

        #page-wrap {
            width: 400px;
            margin: 50px auto;
            padding: 20px;
            background: white;
            -moz-box-shadow: 0 0 20px black;
            -webkit-box-shadow: 0 0 20px black;
            box-shadow: 0 0 20px black;
        }
    </style>
</head>

<body>
    <div id="page-wrap">
        <h1>Demo Page</h1>
        <p>If you are seeing a background image, then your server is serving multiple assets! Great job!</p>
    </div>

</body>

</html>
```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the server properly handle a POST (405)? 

### Points
1 / 2

### Command
```
testing/post.sh
```

### stdout
```
*   Trying 127.0.0.1:8084...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8084 (#0)
> POST /page.html HTTP/1.1
> Host: localhost:8084
> User-Agent: curl/7.68.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
* HTTP 1.0, assume close after body
< HTTP/1.0 200 OK
< 
{ [235 bytes data]
* Closing connection 0
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Not Found</title>
</head>

<body>
    <p>Method Not Allowed!</p>
</body>

</html>
```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the server properly handle a GET of a nonexistent file (404)? 

### Points
1 / 2

### Command
```
testing/get-bad.sh
```

### stdout
```
*   Trying 127.0.0.1:8084...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8084 (#0)
> GET /bad.html HTTP/1.1
> Host: localhost:8084
> User-Agent: curl/7.68.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
* HTTP 1.0, assume close after body
< HTTP/1.0 200 OK
< 
{ [232 bytes data]
* Closing connection 0
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Not Found</title>
</head>

<body>
    <p>File not found!</p>
</body>

</html>

```

### stderr
```

```

### Return Code
0

-------------------------------------------------------------------------------



### Test
Does the server load page.html correctly using Chrome (set up SSH port forwarding)? 

### Points
2 / 2

### Command
```

```

### stdout
```
b'None'
```

### stderr
```
b'None'
```

### Return Code
None

-------------------------------------------------------------------------------



### Test
Does the server load large_image.jpg correctly using Chrome (set up SSH port forwarding)? 

### Points
1 / 1

### Command
```

```

### stdout
```
b'None'
```

### stderr
```
b'None'
```

### Return Code
None

-------------------------------------------------------------------------------

